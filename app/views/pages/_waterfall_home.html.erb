

<!-- data for landing chart -->
<%
dataset1 = {label: "Dec 2017", value: 3, serietype: "baseline", offset: 0}
dataset2 = {label: "Rainy Season", value: 2, serietype: "less", offset: 1}
dataset3 = {label: "Promotion", value: 1, serietype: "plus", offset: 1}
dataset4 = {label: "Le Wagon", value: 3, serietype: "plus", offset: 2}
dataset5 = {label: "Jan 2018", value: 5, serietype: "baseline", offset: 0}

data_landing = [dataset1, dataset2, dataset3, dataset4, dataset5]

font_size_landing = 12
%>



<script src="https://d3js.org/d3.v4.min.js"></script>

  <!-- This is a custom method to toggle show/hide of export button in navbar -->

<meta charset="utf-8">

<style>

  .axis path,
  .axis line {
    fill: none;
    stroke: #000;
    shape-rendering: crispEdges;
  }

  .axis text {
    font-family: "Arial";
    font-size: <%= font_size_landing - 4 %>px;
    transform: rotate(-45deg);
    text-anchor: end;
  }

  .bar {
    fill: #3EC28F;
  }

  #bar-baseline-landing {
    fill: #141414;
  }

  #bar-plus-landing {
    fill: #3EC28F;
  }

  #bar-less-landing {
    fill : #FD7366;
  }

  .bar {
    opacity: 1;
  }

  .bar:hover {
    opacity: 0.8;
  }

  .axis--x .tick line{
      visibility:hidden;
    }

  .axis--y {
    display: none;
  }

  .value {
    fill:white;
    font: <%= font_size_landing %>px;
    font-weight: 400;
    text-anchor: middle;
  }

  .value-baseline {
    fill: black;
    font-weight: 800;
  }

</style>

<script>

  // set up the margins according to page index or chart_builder
  var marginTop = 60;
  var marginBottom = 60;
  var marginSide = 10;


    // make chart responsive
    function responsivefy(svg) {

      // get container and svg aspect ratio
      var container = d3.select(svg.node().parentNode),
        widthSvg = parseInt(container.style("width")),
        heightSvg = parseInt(container.style("height")),
        aspect = widthSvg / heightSvg;

      // add viewBox and preserveAspectRatio properties
      svg.attr("viewBox", "0 0 " + widthSvg + " " + heightSvg)
        .attr("preserveAspectRatio", "xMinYMid")
        .attr("width", widthSvg)
        .attr("height", heightSvg);

        console.log(heightSvg);
        console.log(widthSvg);
    }


var datasource = <%= data_landing.to_json.html_safe %>

var svg = d3.select(".landing-chart > svg");

  svg.call(responsivefy);


var svg = svg,

    margin = {top: marginTop , right: marginSide, bottom: marginBottom, left: marginSide},

    width = +svg.attr("width") - margin.left - margin.right,
    height = +svg.attr("height") - margin.top - margin.bottom;

var x = d3.scaleBand().rangeRound([0, width]).padding(0.1),
    y = d3.scaleLinear().rangeRound([height, 0]);

var g = svg.append("g")
    .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

    x.domain(datasource.map(function(d) { return d.label; }));
    y.domain([ 0, d3.max(datasource, function(d) { return (d.value + d.offset); })]);

    // add x labels
    g.append("g")
        .attr("class", "axis axis--x")
        .attr("transform", "translate(0," + height + ")")
        .call(d3.axisBottom(x).tickSizeOuter(0))

    // add y labels (vertical axis)
    g.append("g")
        .attr("class", "axis axis--y")
        .call(d3.axisLeft(y).ticks(10))
      .append("text")
        .attr("font-family", "Arial")
        .attr("transform", "rotate(-90)")
        .attr("y", 6)
        .attr("font-size", "<%= font_size_landing %>px")
        .attr("text-anchor", "end")
        .text("value");

    // add title
    g.append("text")
      .attr("x", (width / 2))
      .attr("y", 0 - (margin.top / 1.5))
      .attr("text-anchor", "middle")
      .attr("font-family", "Arial")
      .style("font-size", "<%= font_size_landing + 2 %>px")
      .text("Brownies Sold by Gyspy Kitchen");

    // add subtitle
    g.append("text")
      .attr("x", (width / 2))
      .attr("y", 0 - (margin.top / 2) + 10)
      .attr("text-anchor", "middle")
      .attr("font-family", "Arial")
      .style("font-size", "<%= font_size_landing %>px")
      .text("quantities (in thousands)");

    // add bars
   g.selectAll(".bar")
      .data(datasource)
      .enter().append("rect")
        .attr("font-family", "Arial")
        .attr("width", x.bandwidth())
        .attr("x", function(d) { return x(d.label); })
        .attr("y", function(d) { return height - y(d.value); }) // starting point of transition
        .attr("height", 0) // starting point of transitio
        .attr("class", function(d) {return ("bar bar-" + d.serietype); })
        .attr("id", function(d) { return ("bar-" + d.serietype +"-landing"); });



        

    //add labels
    g.selectAll(".text")
      .data(datasource)
      .enter().append("text")
      .attr("opacity", 0)
      .attr("font-family", "Arial")
      .attr("class", function(d) { return "value value-" + d.serietype })
      .attr("x", (function(d) { return x(d.label) + x.bandwidth() / 2 ; }))
      .attr("y", function(d) {
        if (d.serietype === "less") { return y(d.offset) - (<%= font_size_landing %> *3/2); }
        else if (d.serietype === "baseline") { return y(d.value) - ( <%= font_size_landing %> *3/2)}
        else { return y(d.value + d.offset) + 1;} })
      .attr("dy", "<%= font_size_landing %>px")
      .style("font-size", "<%= font_size_landing %>px")
      .text(function(d) {
        if (d.serietype === "less") { return "- " + d.value;}
        else { return d.value; } });

        repeat();

    function repeat() {
    g.selectAll(".value")
      .transition()
        .delay(900)
        .duration(100)
        .ease(d3.easeQuad)
        .attr("opacity", 1)
      .transition()
        .delay(6800)
        .duration(100)
        .ease(d3.easeQuad)
        .attr("opacity", 0)
      .transition()
        .delay(400);

    g.selectAll(".bar")
      .data(datasource)
        .transition()
          .delay(300)
          .duration(600)
          .ease(d3.easeQuad)
          .attr("y", function(d) { return (y(d.value + d.offset)); })
          .attr("height", function(d) { return height - y(d.value); })
        .transition()
          .delay(7000)
          .duration(400)
          .ease(d3.easeQuad)
          .attr("y", function(d) { return height - y(d.value); })
          .attr("height", 0)
      .on("end", repeat);
    };

</script>
