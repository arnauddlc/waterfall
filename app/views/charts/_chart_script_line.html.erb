<script src="https://d3js.org/d3.v4.min.js"></script>

<% colors_hash = colors_selector %>

<!-- This is a custom method to toggle show/hide of export button in navbar -->

<meta charset="utf-8">

<style>

  .axis path,
  .axis line {
    fill: none;
    stroke: #000;
    shape-rendering: crispEdges;
  }

  #path-chart-<%= chart.id %> {
    stroke: <%= colors_hash[chart.color.to_sym] %>;
  }

  .path {
    opacity: 1;
  }

  .path:hover {
    opacity: 0.8;
  }

  .axis text {
    font-family: "Arial";
    font-size: <%= font_use - 2 %>px;
    transform: rotate(-45deg);
    text-anchor: end;
  }

  .axis--x .tick line{
      visibility:hidden;
    }

  .axis--y {
    display: none;
  }

  .value {
    fill:black;
    font: <%= chart.font_size %>px;
    font-weight: 400;
    text-anchor: middle;
  }

</style>

<script>
// set margins
<% if show_export? %>
  var marginTop = 70;
  var marginBottom = 100;
  var marginSide = 50;
  var positionHeight = 4;
<% else %>
  var marginTop = 30;
  var marginBottom = 55;
  var marginSide = 10;
  var positionHeight = 2.5;
<% end %>

var datasource = <%= chart.datasets.order(:created_at).to_json.html_safe %>;


var svg = d3.select("#chart-<%= chart.id %> > svg");

svg.call(responsivefy);

svg = svg,
    margin = {top: marginTop , right: marginSide, bottom: marginBottom, left: marginSide},
    width = +svg.attr("width") - margin.left - margin.right,
    height = +svg.attr("height") - margin.top - margin.bottom;

var x = d3.scaleBand().rangeRound([0, width]).padding(0.1),
    y = d3.scaleLinear().rangeRound([height, 0]);

var g = svg.append("g").attr("transform", "translate(" + margin.left + "," + height / positionHeight + ")");

var line = d3.line()
    .x(function(d) { return x(d.label) + x.bandwidth()/2 ; })
    .y(function(d) { return y(d.value); });

// var lineFin = d3.line()
//     .x(function(d) { return x(d.label) + x.bandwidth()/2 ; })
//     .y(function(d) { return y(d.value); });

    x.domain(datasource.map(function(d) { return d.label; }));
    y.domain([0, d3.max(datasource, function(d) { return d.value; })]);

    // add x labels
      g.append("g")
          .attr("class", "axis axis--x")
          .attr("transform", "translate(0," + height + ")")
          .call(d3.axisBottom(x).tickSizeOuter(0))

    // add y labels (vertical axis)
      g.append("g")
          .attr("class", "axis axis--y")
          .call(d3.axisLeft(y).ticks(10))
        .append("text")
          .attr("font-family", "Arial")
          .attr("transform", "rotate(-90)")
          .attr("y", 6)
          .attr("font-size", " <%= font_use %>px")
          .attr("text-anchor", "end")
          .text("value");

    // add title
    g.append("text")
      .attr("x", (width / 2))
      .attr("y", 0 - (margin.top / 2) - 20)
      .attr("text-anchor", "middle")
      .attr("font-family", "Arial")
      .style("font-size", "<%= font_use + 6 %>px")
      .text("<%= chart.title if show_export? %>");

    // add subtitle
    g.append("text")
      .attr("x", (width / 2))
      .attr("y", 0 - (margin.top / 2))
      .attr("text-anchor", "middle")
      .attr("font-family", "Arial")
      .style("font-size", "<%= font_use %>px")
      .html("<%= chart.subtitle if show_export? %>");

    // add line
    g.append("path")
      .datum(datasource)
      .attr("class", "path")
      .attr("id", "path-chart-<%= chart.id %>")
      .attr("fill", "none")
      .attr("stroke-linejoin", "round")
      .attr("stroke-linecap", "round")
      .attr("stroke-width", 1.5)
      .attr("d", line)
      .transition()
        .delay(300)
        .duration(600)
        .ease(d3.easeQuad)
        .attr("d", line)
        .attrTween("stroke-dasharray", tweenDash);

    // add labels
    g.selectAll(".text")
      .data(datasource)
      .enter().append("text")
      .attr("font-family", "Arial")
      .attr("class","value")
      .attr("x", (function(d) { return x(d.label) + x.bandwidth() / 2 ; }))
      .attr("y", function(d) { return y(d.value) - 20; })
      .attr("dy", "<%= font_use %>px")
      .style("font-size", "<%= font_use %>px")
      .style("opacity", 0)
      .text(function(d) { return d.value; })
      .transition()
      .ease(d3.easeQuad)
      .delay(700)
      .on("start", function repeat() {
        var t = d3.active(this)
          .duration(600)
          .style("opacity", 1)
      });

    // function for transition
    function tweenDash() {
        var l = this.getTotalLength(),
            i = d3.interpolateString("0," + l, l + "," + l);
        return function (t) { return i(t); };
    }

    // make chart responsive
    function responsivefy(svg) {

      // get container and svg aspect ratio
      var container = d3.select(svg.node().parentNode),
        widthSvg = parseInt(svg.style("width")),
        heightSvg = parseInt(svg.style("height")),
        aspect = widthSvg / heightSvg;

      // add viewBox and preserveAspectRatio properties
      svg.attr("viewBox", "0 0 " + widthSvg + " " + heightSvg)
        .attr("preserveAspectRatio", "xMinYMid")
        .attr("width", widthSvg)
        .attr("height", heightSvg);
    }

</script>
